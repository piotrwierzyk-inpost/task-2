Serverless infrastructure for webapp

Network:
VPC + subnet 10.0.0.0/24, Serverless VPC Connector, Private-Service-Access peering

Data:
Cloud SQL PostgreSQL 15 (regional-HA)

Storage:
GCS bucket 

Compute:
Cloud Run service

IAM
Least-privilege SA

Why Cloud Run? 
	•	Serverless autoscaling – spins from 0 to n instances in seconds (we pin minScale = 1, maxScale = 10 via Knative annotations).
	•	$0 idle cost – you only pay per request & CPU-seconds.
	•	Global HTTPS endpoint & certs – no extra load balancer or TLS config.
	•	Stateless container – run any OCI image; swap to a new tag → instant rolling revision.
	•	VPC connector – private egress to Cloud SQL & internal services, no public surface.

How the container talks to SQL & Storage?

Cloud SQL
Unix-socket /cloudsql/$DB_CONNECTION_NAME provided by the Cloud SQL side-car inside Cloud Run. SA holds roles/cloudsql.client.

GCS Bucket
Client libraries auto-auth via Workload Identity. SA has roles/storage.objectAdmin on that one bucket only

Quick start:

# 1. clone
git clone https://github.com/you/task-2.git && cd task-2

# 2. create Service Account for Terraform (one-off)
gcloud iam service-accounts create terraform-sa --display-name "Terraform SA"
gcloud projects add-iam-policy-binding $(gcloud config get-value project) \
  --member="serviceAccount:terraform-sa@$(gcloud config get-value project).iam.gserviceaccount.com" \
  --role="roles/owner"
gcloud iam service-accounts keys create ~/terraform-sa.json \
  --iam-account=terraform-sa@$(gcloud config get-value project).iam.gserviceaccount.com
export GOOGLE_APPLICATION_CREDENTIALS=~/terraform-sa.json

# 3. initialise & apply
terraform init
terraform apply          # ~8-10 min (SQL provisioning is the slowest)

# 4. test
SERVICE_URL=$(gcloud run services describe dev-api \
  --platform managed --region europe-west3 --format='value(status.url)')
curl $SERVICE_URL        # → Hello world
